1. What is typescript ?
- Typescript is a super set of javascript.
- Detect error in the code without running it.
- it needs to be converted to JS to run.
- The compilation process remove all the types.

2. What is Infer types (implicit types)? 
- Types that typescript automatically recognize type without the need of specifying it
eg ; let userName = 'ajmal';
     userName = 0;    ie, there will be an error says number cannot be assigned to string


3. What is Defining Type (Explicit types) ?
- Types that we explicitly specifying 

some examples are : - 
   - let userName2 : string = "ajmal ea";

   - let phone_number : number = 87654321;
    
   - let skills : string[] = ['html','css','js','ts'];
    
   - let count : number[] = [1,2,3,4];
    
   - let emptyArray : [] = [];
    
   - let userDetail : {name:string,age:number} = {
        name:"ajmal",
        age:22
    }


4 . What is Interface ? 
- when declaring objects if there is lot more properties present in the object we have to mention in the type.
- and the second condition is if there is same amount of same properties there in another object . 
- we can specify the properties in interface . and reuse in both objects.

- interface is a way to define structure of an object.
- ensure that object follow specific format by specifying properties and their types.

interface Details {
    name:string;
    age:number;
    salary:number;
}

let employeeDetails : Details = {
    name:"employee1",
    age:20,
    salary:100000
}
let managerDetails : Details = {
    name:"ajmal",
    age:22,
    salary:1000000
}



5. UNION operator ( string | number )
type DetailsType = {
    name:string,
    age:number | string,
    salary:number,
}
- here by mentioning union operator in age . we can give age in either string or number.


6.how to specify that the array contains multiple types ?
- let array : (string|number|boolean)[]=[1,2,3,"string1",true]


7.  age:number|string;    // UNION   - we can insert either number or string . just like or operator
    salary?:number;     //OPTIONAL  - these fields are optional . even if we omit there will be no error


8 . HOw can we define type for functions ?
    function getUserName (userDetail : DetailsType) : string {      => here were are mentioning the string to specify that the function return string datatype
        return userDetail.name;
    }
    getUserName(userDetail)


9 . What is named type (custom creating type)? like enum.
   - type statusType = 'pending' | 'completed' | 'failed' | ''
   - This will ensure there will be no spelling mistake or other values other than
     these will stored in the variable having type statusType


10 . What is function overloading ? 
   - function overloading in typescript allows to define mulitple function signatures for a function,
     enabling it to handle mulitple types

11. What is Generic ?
   - Generic in typescript allows us to create reusable and type safe components like function , class, interface.

12 .HOw to  extend the Type ?
    type type1 ={
    name: string,
    age:number,
    }

    type type2 = type1 & {
        role:string
    }
    // type 2 contains properties of type 1 and add on property role ..

13. How to extend the Interface ? (we use oops concept extends)
    interface type3 {
    name:string,
    age:number
    }

    interface type4 extends type3{
        role:string
    }

14. What is keyof and typeof ?
    These are used to build enums 


15. What are the Utility types? 
   Utility types are basically generic type!!

  i) readonly - makes the properties readonly
  type User = {
    readonly name:string,
    age:number
    }

    const userDetails : User ={
    name:"ajmal",
    age:22
    }

    const adminDetails:Readonly<User>={
    name:"admin",
    age:40
    }

ii) partial (optional) - makes the property optional
    type User = {
    name:string,
    age:number
    }

    const userDetails : Partial<User> ={
        name:"ajmal",
    }

iii) Required
    type User = {
        name:string,
        age?:number
    }

    const userDetails : Required<User> ={
        name:"ajmal",
        age:22
    }

iv) Pick - create a new type by picking the properties from one type 'User' type
    type User = {
        name:string;
        age?:number;
        salary:number;
        phone:number,
        houseName:string,
        pincode:number,
        place:string
    }
    
    const userDetails : Pick<User,"name"|"age"|"pincode"> ={
        name:"ajmal",
        age:22,
        pincode:653322
    }

v) Omit - create a new type by omiting some properties from one type 'User'
    type User = {
        name:string;
        age?:number;
        salary:number;
        phone:number,
        houseName:string,
        pincode:number,
        place:string
    }
    
    const userDetails : Omit<User,"name"|"age"|"pincode"> ={
        salary:10000000,
        phone:987654321,
        houseName:Ettukalil,
        place:kalamassery,
    }

vi) Exclude 
    type statusType = 'completed' | 'pending' | 'failed';
    const statuss : Exclude<statusType,"pending"> = 'completed';


16. What is tuple ?
    Tuple is a special type of array in which there will be a specified number of elements and their types.


17 What is Mixins ?
   - In Typescript Mixins is a way to reuse code across mulitple classes without using traditional class inheritance
   - In Typescript , multiple inheritance is not allowed . one class extends one class.
   - Mixins combines the behaviour from mulitple sources


18 What are the OOPS Concepts in Type Script ?
   i) inheritance.

   ii)Polymorphism :-
    -There are Two Types of Polymorphism - Early Binding Polymorphism and Late Binding Polymorphism.
    --Early Binding Polymorphism
      > Also called static Polymorphism and Compile Time Polymorphism.
      > The method to be executed is determined at compile time hence named Compile time Polymorphism.
      > This Polymorphism is achieved using method overloading.

    --Late Binding Polymorphism
      > Also called Dynamic Polymorphism and Run time Polymorphism.
      > The method to be executed is determined at run time .
      > This Polymorphism is achieved using method Overriding.

    iii)Encapsulation

    iv)Abstraction